import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { GoogleGenerativeAI, Part } from "@google/generative-ai";

dotenv.config();

const app = express();
app.use(express.json({ limit: '50mb' }));
const port = process.env.PORT || 3001;

app.use(cors());

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

app.get('/api', (req, res) => {
  res.send('Hello from the backend!');
});

app.post("/api/generate", async (req, res) => {
  try {
    const { prompt, userImage } = req.body;
    if (!prompt || !userImage) {
      return res.status(400).send("Prompt and userImage are required.");
    }

    // Use Gemini 2.5 Flash Image for image-to-image transformation
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-image-preview" });

    // Create the image part from user's uploaded image
    const imagePart: Part = {
      inlineData: {
        data: userImage.base64,
        mimeType: userImage.mimeType,
      },
    };

    // Create a detailed prompt for hairstyle transformation
    const enhancedPrompt = `Transform this person's hairstyle to: "${prompt}". 
    Make it look realistic, professional, and well-styled. Keep the same person, same face, same background, 
    but change only the hairstyle. The result should look natural and high-quality.`;

    console.log("Generating image with Gemini, prompt:", enhancedPrompt);

    const result = await model.generateContent([enhancedPrompt, imagePart]);
    const response = await result.response;

    console.log("Gemini Response:", JSON.stringify(response, null, 2));
    
    const candidate = response.candidates?.[0];

    if (candidate?.content?.parts) {
      for (const part of candidate.content.parts) {
        if (part.inlineData) {
          res.send({ image: part.inlineData.data });
          return;
        }
      }
    }

    throw new Error("No image was generated by Gemini. Please try again.");

  } catch (error) {
    console.error("Error in /api/generate:", error);
    if (error instanceof Error) {
      // Handle quota exceeded error specifically
      if (error.message.includes("429") || error.message.includes("quota")) {
        res.status(429).send("API quota exceeded. Please wait a moment and try again, or upgrade your plan.");
      } else {
        res.status(500).send(`An error occurred while generating content: ${error.message}`);
      }
    } else {
      res.status(500).send("An unknown error occurred while generating content.");
    }
  }
});

app.listen(port, () => {
  console.log(`Backend server is running on http://localhost:${port}`);
});